/** Declaration file generated by dts-gen */

import { Readable } from "stream";

export interface StreamArgs {
    start: number,
    end: number
}

export interface SnowflakeStatement {
    streamRows(args?: StreamArgs): Readable
    getNumRows(): number
    cancel(cb: (err: any, stmt: SnowflakeStatement) => void): void
}

export type CompleteCallback = (err: any, stmt: SnowflakeStatement, rows: Array<any>) => void

export type SnowflakeJSPrimitive = number | string | boolean | Date | undefined

export interface SqlCommand {
    sqlText: string,
    binds?: Array<SnowflakeJSPrimitive | Array<SnowflakeJSPrimitive>>
}

export interface ExecuteArgs extends SqlCommand {
    streamResult?: boolean,
    complete?: CompleteCallback
}

export interface ConnectionOptions {
    account: string;
    username: string;
    password: string;
    region?: string;
    database?: string;
    schema?: string;
    warehouse?: string;
    role?: string;
    clientSessionKeepAlive?: boolean;
    clientSessionKeepAliveHeartbeatFrequency?: number;
}

export interface SnowflakeConnection {
    connect(cb: (err: any, conn: SnowflakeConnection) => void): void
    execute(args: ExecuteArgs): SnowflakeStatement
}
